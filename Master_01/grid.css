* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    height: 100vh;
    width: 100vw;
}

.container {
    height: 100%;
    width: 100%;
    padding: 5px;
    
    /* Set the display field to grid to use grid property */
    display: grid;
    /* display: inline-grid */

    /* row-gap: 1rem;
    column-gap: 1rem; */
    
    /* Shorthand Property for row-gap and column-gap */
    grid-gap: 1rem;

    /* This Code is not good for responsiveness */
    /* grid-template-rows: 200px 200px;
    grid-template-columns: 200px 200px 200px; */

    /* fr - fractional unit - It will divides the block into specified fractional units */
    /* grid-template-rows: 1fr 1fr;
    grid-template-columns: 1fr 1fr 1fr; */

    /* The above code can also be written as - Also this will define the number of rows and columns in the grid template */
    grid-template-rows: repeat(4, 1fr);
    grid-template-columns: repeat(3, 1fr);
}

.items {
    border: 1px solid black;
    font-weight: bold;
    font-family: sans-serif;
    color: white;
    font-size: 2rem;
    
    display: flex;
    justify-content: center;
    align-items: center;
}

.header, .footer {
    background-color: rgb(79, 82, 226);

    /* These Property will define from where the block will start and where it ends */
    /* grid-column-start: 1;
    grid-column-end: 4; */

    /* Shorthand property for grid-column-start and grid-column-end */
    grid-column: 1/4;
}

.sidebar {
    background-color: #1eccb5;

    /* These Property will define from where the block will start and where it ends */
    /* grid-row-start: 2;
    grid-row-end: 4; */

    /* Shorthand property for grid-row-start and grid-row-end */
    grid-row: 2/4;
}

.content1, .content2, .content3 {
    background-color: #0869b8;
}

.content1 {
    /* These Property will define from where the block will start and where it ends */
    /* grid-column-start: 2;
    grid-column-end: 4; */

    /* Shorthand property for grid-column-start and grid-column-end */
    grid-column: 2/4;
}

@media (max-width: 750px) {
    .container {
        grid-template-columns: repeat(1, 1fr);
        grid-template-rows: repeat(6, 1fr);
    }

    /* Resetting the grid-row and grid-column property to auto - so that it can take the whole width and height of the parent conatiner */
    .items {
        grid-row: auto;
        grid-column: auto;
    }
}

/* ------------------------------------------------------------------------------------------------ */

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    height: 100vh;
    width: 100vw;
    background-color: #444;
}

.cont {
    width: 100%;
    height: 100%;
    background-color: #493e3e;

    display: grid;
    grid-template-columns: repeat(4, 200px);
    grid-template-rows: repeat(1, 300px);
    grid-gap: 1rem;

    padding: 2rem;
    border: 2px solid white;

    /* All the items will move to the start of the cell (horizontally) */
    /* justify-items: start; */
    /* All the items will move to the center of the cell (vertically) */
    /* align-items: center; */

    /* All the items will move to the center of the cell (horizontally and vertically) */
    place-items: center;

    /* Move the container (which contains all the grid cell) to the center along horizontal axis */
    /* justify-content: start; */
    /* Move the container (which contains all the grid cell) to the center along vertical axis */
    /* align-content: center; */

    /* Move the container (which contains all the grid cell) to the center along horizontal and vertical axis */
    place-content: center;
}

.item {
    width: 100px;
    height: 100px;

    background-color: #3fa744;
    border: 2px solid white;

    /* This Property will work when cell have enough width - It will stretch horizontally & item witdh should not be hard coded */
    /* justify-self: stretch; */

    /* This Property will work when cell have enough height - It will stretch vertically & item height should not be hard coded */
    /* align-self: stretch; */

    /* If you want to center the item (horizontally and vertically) along the cell */
    /* place-self: center; */
}

/*
    ==========
    CSS Grids:
    ==========
    . The Grid Layout Module offers a grid-based layout system, with rows and columns.
    . The Grid Layout Module allows developers to easily create complex web layouts.
    . The Grid Layout Module makes it easier to design a responsive layout structure, without using float or positioning.

    ## Grid vs Flexbox:
    -------------------
    -- The CSS Grid Layout should be used for two-dimensional layout, with rows AND columns.
    -- The CSS Flexbox Layout should be used for one-dimensional layout, with rows OR columns.

    ## CSS Grid Components:
    -----------------------
    A grid always consists of:
    
    . Grid Container - the parent (container) <div> element
    . Grid Items - the items inside the container <div>

    ## Grid Container and Grid Items:
    ---------------------------------
    . A grid layout consists of a parent element (the grid container), with one or more grid items.
    . All direct children of the grid container automatically become grid items.

    Ex:
    ---
    <div class="container">
        <div>1</div>
        <div>2</div>
        <div>3</div>
        <div>4</div>
        <div>5</div>
        <div>6</div>
        <div>7</div>
        <div>8</div>
    </div>

    ** Display Grid Property:
    -------------------------
    . The <div> element becomes a grid container when its display property is set to grid or inline-grid.

    Ex:
    ---
    .container {
        display: grid;
    }

    Ex:
    ---
    .container {
        display: inline-grid;
    }

    ** Parent | Grid Container:
    ---------------------------
    . display               ‚úÖ
    . grid-template-columns ‚úîÔ∏è
    . grid-template-rows    ‚úîÔ∏è
    . grid-template-areas   ‚úîÔ∏è
    . grid-template         ‚úîÔ∏è
    . grid-column-gap       üóùÔ∏è
    . grid-row-gap          üóùÔ∏è
    . grid-gap              üóùÔ∏è
    . justify-items         üìí
    . align-items           üìí
    . place-items           üìí
    . justify-content       ¬©Ô∏è
    . align-content         ¬©Ô∏è
    . place-content         ¬©Ô∏è
    . grid-auto-columns     üìò
    . grid-auto-rows        üìò
    . grid-auto-flow        üìò
    . grid                  üìò

    ** Child | Grid Items:
    ----------------------
    . grid-column-start ‚è≥
    . grid-column-end   ‚è≥
    . grid-row-start    ‚è≥
    . grid-row-end      ‚è≥
    . grid-column       ‚è≥
    . grid-row          ‚è≥
    . grid-area         üí≤
    . justify-self      1Ô∏è‚É£
    . align-self        1Ô∏è‚É£
    . place-self        1Ô∏è‚É£

    ===============================================================================================

    ======================
    ## CSS Grid Container:
    ======================

    # Grid Container:
    -----------------
    - A grid container contains one or more grid items arranged in columns and rows.
    - Direct child elements(s) of the grid container automatically becomes grid items.
    - An element becomes a grid container when its display property is set to grid or inline-grid.

    ## CSS Grid Columns, Rows and Gaps:
    -----------------------------------

    . Grid Columns: The vertical lines of grid items are called columns.
    . Grid Rows: The horizontal lines of grid items are called rows.
    . Grid Gaps: The spaces between each column/row are called gaps.

    You can adjust the gap size by using one of the following properties:
    ---------------------------------------------------------------------
    
    |-------------|
    |. column-gap |
    |. row-gap    |
    |. gap        |
    |-------------|

    # The column-gap Property:
    --------------------------
    - The column-gap property specifies the gap between the columns in a grid.

    ** Specify a 50 pixels gap between the columns in the grid:

    Ex:
    ---
    .container {
        display: grid;
        column-gap: 50px;
    }

    # The row-gap Property:
    -----------------------
    - The row-gap property specifies the gap between the rows in a grid.

    ** Specify a 50 pixels gap between the rows in the grid:

    Ex:
    ---
    .container {
        display: grid;
        row-gap: 50px;
    }

    # The gap Property:
    -------------------
    - The gap property is a shorthand property for row-gap and column-gap.

    ** Set the gap between rows to 50px, and the gap between columns to 100px in the grid:

    Ex:
    ---
    .container {
        display: grid;
        gap: 50px 100px;
    }

    ** Set the gap between rows and the columns to 50px in the grid:
    
    Ex:
    ---
    .container {
        display: grid;
        gap: 50px;
    }

    ## Grid Tracks:
    --------------
    The rows and columns of a grid is defined with the grid-template-rows and the grid-template-columns properties (or the shorthand grid or grid-template properties).
    These define the grid tracks. A grid track is the space between two adjacent grid lines.

    |--------------------------|
    |. grid-template-rows      |
    |. grid-template-columns   |
    |. grid-template           |
    |--------------------------|

    # The grid-template-columns Property:
    -------------------------------------
    - The grid-template-columns property defines the number of columns in your grid layout, and it can define the width of each column.
    - The value is a space-separated-list, where each value defines the width of the respective column.
    - If you want your grid layout to contain 4 columns, specify the width of the 4 columns, or "auto" if all columns should have the same width.

    ** Make a grid with 4 columns of equal width:

    Ex:
    ---
    .grid-container {
        display: grid;
        grid-template-columns: auto auto auto auto;
    }

    - The grid-template-columns property can also be used to specify the exact size (width) of the columns, or a mix of fixed size and auto.

    Set a fixed size for column 1, 2, and 4, and keep column 3 as auto size:

    Ex:
    ---
    .grid-container {
        display: grid;
        grid-template-columns: 80px 200px auto 40px;
    }

    Note::
    ------
    - If you have more than 4 grid items in a 4 columns grid, the grid will automatically add a new row to put the items in.

    # Cell Sizing with the fr Unit:
    -------------------------------
    - The fr unit can be used when defining grids, like any other CSS length such as %, px or em.
    - The fr unit stands for "fraction". This unit automatically divides the available space into fractions.
    
    --> Example: 1fr will take 1 fraction of the available space, while 2fr will take 2 fractions of the available space.

    ** Here, each column will take up 25% of the container width, splitting it equally:

    Ex:
    ---
    .grid-container {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr 1fr;
    }

    ** Here, the second column will be twice as big as the others:

    Ex:
    ---
    .grid-container {
        display: grid;
        grid-template-columns: 1fr 2fr 1fr 1fr;
    }

    # The grid-template-rows Property:
    ----------------------------------
    - The grid-template-rows property defines the height of each row.
    
    ** The value is a space-separated-list, where each value defines the height of the respective row:

    Ex:
    ---
    .grid-container {
        display: grid;
        grid-template-rows: 80px 200px;
    }

    Note::
    ------
    - Notice that the first row in the grid above is 80px high and the second row is 200px high. The next rows will use auto as default.

    |---------------------|
    |. justify-content    |
    |. align-content      |
    |. place-content      |
    |---------------------|

    # The justify-content Property:
    -------------------------------
    - The justify-content property is used to align the grid items when they do not use all available space on the main-axis (horizontally).

    --> The justify-content property can have one of the following values:

    . space-evenly
    . space-around
    . space-between
    . center
    . start
    . end

    Note::
    ------
    - The grid item's total width has to be less than the container's width for the justify-content property to have any effect.

    Ex:
    ---
    .grid-container {
        display: grid;
        justify-content: end;
    }

    ~ The space-evenly value displays the grid items with equal space around them.
    ~ The space-around value displays the grid items with space around them.
    ~ The space-between value displays the grid items with space between them.
    ~ The center value positions the grid items in the center of the container.
    ~ The start value positions the grid items at the start of the container.
    ~ The end value positions the grid items at the end of the container.

    # The align-content Property:
    -----------------------------
    - The align-content property is used to align the grid items when they do not use all available space on the cross-axis (vertically).

    --> The align-content property can have one of the following values:

    . space-evenly
    . space-around
    . space-between
    . center
    . start
    . end

    Note::
    ------
    - The grid item's total height has to be less than the container's height for the align-content property to have any effect.

    In the following examples we use a "400 pixels high container", to better demonstrate the align-content property.
    
    Ex:
    ---
    .grid-container {
        display: grid;
        height: 400px;
        align-content: center;
    }

    ~ The center value positions the grid items in the middle of the container.
    ~ With space-evenly, the grid lines are evenly distributed in the grid container, with equal space on top, bottom and between.
    ~ With space-around, the space between the grid lines are equal, but the space before the first grid item and after the last grid item is set to half of the space between the grid lines.
    ~ With space-between, the space between the grid lines are equal, but the first grid item is flush with the start edge of the container, and the last grid item is flush with the end edge of the container.
    ~ The start value positions the grid items at the start of the container.
    ~ The end value positions the grid items at the end of the container.

    # The place-content Property:
    -----------------------------
    - The place-content property is a shorthand property for the align-content and the justify-content properties.

    Values:
    --> <align-content> / <justify-content>
    ‚Äì The first value sets align-content, the second value justify-content.
    - If the second value is omitted, the first value is assigned to both properties.

    If the place-content property has two values:
        place-content: start center; - the align-content value is 'start' and justify-content value is 'center'
    
    If the place-content property has one value:
        place-content: end; - both align-content and justify-content values are 'end'

    ** The center value positions the grid items in the middle of the container (both vertically and horizontally):

    Ex:
    ---
    .grid-container {
        display: grid;
        height: 400px;
        place-content: center;
    }

    ** The end space-between value aligns the grid lines towards the bottom of the grid container, and aligns the grid items with the same space between them horizontally:

    Ex:
    ---
    .grid-container {
        display: grid;
        height: 400px;
        place-content: end space-between;
    }

    # The justify-items Property:
    -----------------------------
    - Aligns grid items along the inline (row) or horizontal axis.
    - This value applies to all grid items inside the container.

    Values:
    . start ‚Äì aligns items to be flush with the start edge of their cell
    . end ‚Äì aligns items to be flush with the end edge of their cell
    . center ‚Äì aligns items in the center of their cell
    . stretch ‚Äì fills the whole width of the cell (this is the default)

    Ex:
    ---
    .container {
        justify-items: start | end | center | stretch;
    }

    # The align-items Property:
    ---------------------------
    - Aligns grid items along the block (column) or cross axis.
    - This value applies to all grid items inside the container.

    Values:
    . stretch ‚Äì fills the whole height of the cell (this is the default)
    . start ‚Äì aligns items to be flush with the start edge of their cell
    . end ‚Äì aligns items to be flush with the end edge of their cell
    . center ‚Äì aligns items in the center of their cell

    Ex:
    ---
    .container {
        align-items: start | end | center | stretch;
    }

    # The place-items Property:
    ---------------------------
    - place-items sets both the align-items and justify-items properties in a single declaration.
    - Basically, It is the shorthand for justify-items and align-items.

    Values:
    --> <align-items> / <justify-items>
    ‚Äì The first value sets align-items, the second value justify-items. 
    - If the second value is omitted, the first value is assigned to both properties.

    # The grid-auto-columns & grid-auto-rows Property:
    --------------------------------------------------
    - Specifies the size of any auto-generated grid tracks (aka implicit grid tracks).
    -  Implicit tracks get created when there are more grid items than cells in the grid or when a grid item is placed outside of the explicit grid.

    Values:
    -- <track-size> ‚Äì can be a length, a percentage, or a fraction of the free space in the grid (using the fr unit)
    
    Ex:
    ---
    .container {
        grid-auto-columns: <track-size> ...;
        grid-auto-rows: <track-size> ...;
    }
    
    # The grid-auto-flow Property:
    ------------------------------
    - If you have grid items that you don‚Äôt explicitly place on the grid, the auto-placement algorithm kicks in to automatically place the items.
    - This property controls how the auto-placement algorithm works.

    Values:
    --> row ‚Äì tells the auto-placement algorithm to fill in each row in turn, adding new rows as necessary (default)
    --> column ‚Äì tells the auto-placement algorithm to fill in each column in turn, adding new columns as necessary
    --> dense ‚Äì tells the auto-placement algorithm to attempt to fill in holes earlier in the grid if smaller items come up later

    Ex:
    ---
    .container {
        grid-auto-flow: row | column | row dense | column dense;
    }

    # The grid Property:
    --------------------
    - A shorthand for setting all of the following properties in a single declaration: grid-template-rows, grid-template-columns, grid-template-areas, grid-auto-rows, grid-auto-columns, and grid-auto-flow.

    ===============================================================================================

    =================
    ## CSS Grid Item:
    =================

    - A grid container contains one or more grid items.
    - By default, a container has one grid item for each column, in each row, but you can style the grid items so that they will span multiple columns and/or rows.

    ## Grid Lines:
    --------------
    - The lines between columns are called column lines.
    - The lines between rows are called row lines.

    --> We can specify where to start and end a grid item by using the following properties:

    |---------------------|
    |. grid-column-start  |
    |. grid-column-end    |
    |. grid-row-start     |
    |. grid-row-end       |
    |. grid-column        |
    |. grid-row           |
    |---------------------|

    - You can refer to line numbers when placing a grid item in a grid container.

    # The grid-column-start and grid-column-end Properties:
    -------------------------------------------------------
    - The grid-column-start property specifies where to start a grid item.
    - The grid-column-end property specifies where to end a grid item.

    ** Place the first grid item at column-line 1, and let it end on column-line 3:

    Ex:
    ---
    .item1 {
        grid-column-start: 1;
        grid-column-end: 3;
    }

    # The grid-column Property:
    ---------------------------
    - The grid-column property is a shorthand property for the grid-column-start and the grid-column-end properties.

    ** Place the first grid item at column-line 1, and let it span 2 columns:
    --> Here span means it will take 2 blocks or span to 2 columns (not the end column number) but the number of blocks it will take

    Ex:
    ---
    .item1 {
        grid-column: 1 / span 2;
    }

    # The grid-row-start and grid-row-end Property:
    -----------------------------------------------
    - The grid-row-start property specifies where to start a grid item.
    - The grid-row-end property specifies where to end a grid item.

    ** Place the first grid item at row line 1, and let it end on row line 3:

    Ex:
    ---
    .item1 {
        grid-row-start: 1;
        grid-row-end: 3;
    }

    # The grid-row Property:
    ------------------------
    - The grid-row property is a shorthand property for the grid-row-start and the grid-row-end properties.

    ** Place the first grid item at row-line 1, and let it span 2 rows:

    Ex:
    ---
    .item1 {
        grid-row: 1 / span 2;
    }

    ** Make "item1" start on row-line 1 and end before row-line 4:

    Ex:
    ---
    .item1 {
        grid-row: 1 / 4;
    }

    # The grid-area Property:
    -------------------------
    - The grid-area property is a shorthand property for the grid-row-start, grid-column-start, grid-row-end and the grid-column-end properties.
    - The syntax is grid-row-start / grid-column-start / grid-row-end / grid-column-end.

    ** Make "item4" start on row-line 1 and column-line 2, and end on row-line 3 and column line 2:

    Ex:
    ---
    .item4 {
        grid-area: 1 / 2 / 3 / 2;
    }

    ** Make "item4" start on row-line 1 and column-line 1, and span 4 rows and 1 column:

    Ex:
    ---
    .item8 {
        grid-area: 1 / 1 / span 4 / span 1;
    }

    ## Naming Grid Items with grid-area:
    ------------------------------------
    - The grid-area property can also be used to assign names to grid items.
    - The named grid items can then be referred to by the grid-template-areas property of the grid container.

    ** Item1 gets the name "myArea" and spans all five columns in a five columns grid layout:

    Ex:
    ---
    .item1 {
        grid-area: myArea;
    }

    .grid-container {
        grid-template-areas: 'myArea myArea myArea myArea myArea';
    }

    Note:
    -----
    - Each row is defined by apostrophes (' ').
    - The named grid items in each row is defined inside the apostrophes, separated by a space.

    ** Let "myArea" span three columns in a five columns grid layout (period signs represent items with no name):

    Ex:
    ---
    .item1 {
        grid-area: myArea;
    }

    .grid-container {
        grid-template-areas: 'myArea myArea myArea . .';
    }

    $ Note: A period sign represents a grid item with no name.

    ** To define two rows, define the second row inside another set of apostrophes:
    ** Let "item1" span two columns and two rows:

    Ex:
    ---
    .item1 {
        grid-area: myArea;
    }

    .grid-container {
        grid-template-areas:
            'myArea myArea . . .'
            'myArea myArea . . .';
    }

    ** Name all grid items, and make a ready-to-use webpage template:

    Ex:
    ---
    .item1 { grid-area: header; }
    .item2 { grid-area: menu; }
    .item3 { grid-area: main; }
    .item4 { grid-area: right; }
    .item5 { grid-area: footer; }

    .grid-container {
        grid-template-areas:
            'header header header header header header'
            'menu main main main main right'
            'menu footer footer footer footer footer';
    }

    ## The Order of the Grid Items:
    -------------------------------
    - The grid-area property can also be used to define the order of the grid items.

    Use Case: The first grid item in the HTML code does not have to appear as the first item in the grid.

    Define the order of the grid items:

    Ex:
    ---
    ** place in row 1 column 3
    .item1 {grid-area: 1 / 3;}

    ** place in row 2 column 3
    .item2 {grid-area: 2 / 3;}

    ** place in row 1 column 1
    .item3 {grid-area: 1 / 1;}

    ** place in row 1 column 2
    .item4 {grid-area: 1 / 2;}

    ** place in row 2 column 1
    .item5 {grid-area: 2 / 1;}

    ** place in row 2 column 2
    .item6 {grid-area: 2 / 2;}

    ** You can also re-arrange the order for certain screen sizes, with media queries:

    Re-arrange order on small devices:

    Ex:
    ---
    @media only screen and (max-width: 500px) {
        .item1 {grid-area: 1 / span 3;}
        .item2 {grid-area: 3 / 3;}
        .item3 {grid-area: 2 / 1;}
        .item4 {grid-area: 2 / 2 / span 2;}
        .item5 {grid-area: 3 / 1;}
        .item6 {grid-area: 2 / 3;}
    }

    # The justify-self Property:
    ----------------------------
    - The justify-self property is used to align the content of a grid item along the row axis.
    - This alignment happens within the cell (Square Shaped)

    Possible Values: 
    . start   = left
    . end     = right
    . center  = center
    . stretch = full width

    Ex:
    ---
    .item1 {
        justify-self: right;
    }

    .item6 {
        justify-self: center;
    }

    # The align-self Property:
    --------------------------
    - The align-self property is used to align the content of a grid item along the column axis.
    - This alignment happens within the cell (Square Shaped)

    Possible Values: 
    . start   = top
    . end     = bottom
    . center  = center
    . stretch = full height

    Ex:
    ---
    .item1 {
        align-self: start;
    }

    .item6 {
        align-self: center;
    }

    # The place-self Property:
    --------------------------
    - A shorthand property for the align-self and the justify-self properties.

    Values:
    --> auto ‚Äì The ‚Äúdefault‚Äù alignment for the layout mode.
    --> <align-self> / <justify-self>
    ‚Äì The first value sets align-self, the second value justify-self.
    - If the second value is omitted, the first value is assigned to both properties.

    Note::
    ------
    - justify-content = Align the whole grid block along horizontal (main) axis wrt the parent container
    - align-content = Align the whole grid block along vertical (cross) axis wrt the parent container

    - justify-items = Align all the grid items along horizontal (main) axis wrt the parent container
    - align-items = Align all the grid items along vertical (cross) axis wrt the parent container

    - justify-self = Align the grid item (individual item) along horizontal (main) axis wrt the grid cell
    - align-self = Align the grid item (individual item) along vertical (cross) axis wrt the grid cell
*/