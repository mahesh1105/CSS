* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    width: 100vw;
    height: 100vh;

    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
}

.container {
    width: 100%;
    height: 100%;
}

.main {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 40px;
    gap: 20px;
}

.main > p {
    color: rgb(65, 66, 66);
}

.block {
    display: grid;

    /* grid-template-columns: repeat(4, 350px);
    grid-template-rows: repeat(2, 1fr); */

    /* Without using Media Queries - Responsiveness can be added */
    grid-template-columns: repeat(auto-fit, minmax(350px, 400px));

    grid-gap: 30px;
    justify-content: center;
}

.item {
    width: 350px;
    height: 500px;

    background-color: rgb(250, 249, 249);

    border: 1px solid rgb(209, 200, 200);
    border-radius: 10px;

    /* To maintain the item */
    display: flex;
    flex-direction: column;

    /* Content will not overflow outside the item container */
    overflow: hidden;
}

.item > a {
    width: 100%;
    height: 50%;
}

.item > a > img {
    width: 100%;
    height: 100%;

    border-top-left-radius: 10px;
    border-top-right-radius: 10px;

    cursor: pointer;

    /* Make the smooth transform */
    transition: transform 0.5s ease;
}

.content > a {
    text-decoration: none;
    color: black;
}

.content > a > h4 {
    margin-top: 15px;
    margin-bottom: 10px;
    text-align: center;
}

.content > p {
    padding-left: 20px;
    padding-right: 20px;

    color: rgb(65, 66, 66);
    font-size: 0.9rem;
}

.item > a > img:hover {
    transform: scale(1.05);
}

.bottom {
    display: flex;
    justify-content: space-between;
    padding: 20px;
    margin-top: auto;
}

.coll {
    display: flex;
    gap: 15px;
}

.bottom img {
    width: 30px;
    height: 30px;

    border-radius: 60%;
    object-fit: cover;

    background-color: rgb(112, 109, 109);

    cursor: pointer;
}

.bottom > p {
    border: 1px solid rgb(209, 200, 200);
    display: inline;
    border-radius: 5px;
    padding: 5px;

    color: rgb(65, 66, 66);
    font-size: 0.9rem;
}

.details #name {
    color: dodgerblue;
}

.details #date {
    color: rgb(90, 91, 92);
    font-size: 0.75rem;
}

/* Media Queries for Different-Different Screens */

/* @media (max-width: 800px) {
    .block {
        grid-template-columns: repeat(1, 350px);
        grid-template-rows: repeat(8, 1fr);
    }
}

@media (min-width: 800px) and (max-width: 1200px) {
    .block {
        grid-template-columns: repeat(2, 350px);
        grid-template-rows: repeat(4, 1fr);
    }
}

@media (min-width: 1200px) and (max-width: 1600px) {
    .block {
        grid-template-columns: repeat(3, 350px);
        grid-template-rows: repeat(3, 1fr);
    }
} */

/*
    Ex:
    ---
    grid-template-columns: repeat(auto-fit, minmax(350px, 400px));

    🤖 auto-fit
    - It tells the grid to automatically fit as many columns as possible into the row.
    - It behaves responsively — adjusts based on the available space.
    - If there’s extra space, it will try to add another column (if it fits within the size range you give).

    📏 minmax(350px, 400px)
        This means:
        - The column should be at least 350px wide
        - But can grow up to 400px if space allows

        It’s like giving it flexible breathing room!

    Ex:
    ---
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));

    🧱 auto-fill – "Reserve the space, even if it's empty"
    - It creates as many columns as it can fit, just like auto-fit.
    - But if there’s not enough content, it will still reserve empty tracks (spaces).
    - That means you might see empty columns.

    Example:
    If you can fit 4 columns but only have 2 items:
    auto-fill will still act like there are 4 columns.
    You'll get 2 items and 2 empty spaces.

    🧽 auto-fit – "Shrink and stretch to fit real content only"
    - It also creates as many columns as it can fit.
    - But if there’s no content to fill a column, it will collapse that space and let others expand.
    - Result: no empty spaces; everything hugs the content.

    🔍 Visual Summary:
    Imagine your layout as empty boxes 🟦:

    auto-fill:
    ----------
    [ 🟦 ][ 🟦 ][    ][    ]
    (2 items + 2 empty boxes)
    
    auto-fit:
    ---------
    [   🟦   ][   🟦   ]
    (2 items stretch and fill available space)

    ✅ When to use which?
    - Use auto-fill if you want a consistent grid, even when not all spaces are filled (e.g. form fields, fixed layout).
    - Use auto-fit if you want your items to stretch to fill the space and avoid weird empty gaps.
*/